.box {
    @include type_space(padding, 1);
    @extend %grid_reset;
	@extend %cf;
    @extend %space_b;
    > :last-child{
    	margin-bottom: 0;
    }
}
.box_small {
    @include type_space(padding, .5);
}
.box_open {
	@extend %pad_n_h;
	border-width: 1px;
	border-style: solid;
    border-top-color: color(function);
    border-bottom-color: color(function);
    border-left-color: transparent;
    border-right-color: transparent;
	margin-top: -2px; // Adjusted baseline for borders.
}
.box_closed{
    border: 1px solid color(function);
	margin-top: -2px; // Adjusted baseline for borders.
}

//Creates a responsive, square container.
//Must have a .body inside for content.
.box_square {
    @extend %o_hide;
    display:block;
    position: relative;
	word-break: break-word;
	@include media-query($smalls){
		@include rems(max-height, ($base_line_height * 5));
	}
	.body{
		@include type_space_sc(padding, .5,.5,0,.5);
		@extend %grid_reset;
		display: block;
		left: 0;
		position: absolute;
		top: 0;
		text-align: left;
	}
	&:before{
		margin-top: 100%;
		display:block;
		font-size: 0;
		color: transparent;
		content:" ";
	}
}
//
//Modifiers for box_square
//
// 3:4 box
.pano:before{
	margin-top: 75%;
}
// 1:2 box
.wide:before{
	margin-top: 50%;
}
.box_light, %box_light{
	background-color: #fff;
}
.box_dark, %box_dark{
	background-color: colors(function);
	color: #fff;
	border-color: currentColor;
}
.box_glass, %box_glass{
	@extend %bg_ghost;
	box-shadow: 0 2px 2px -.5px rgba(color(text), .1);
}
.box_panel, %box_panel {
	@extend %box_light;
	border-radius: $tab_border_radius;
	box-shadow: 0px 2px 0px rgba(color(text), .1);
	position: relative;
}
.box_card {
	@include type_space(max-height, 10);
    @include type_space(padding, .5);
	@include type_space(height, 12);
    @extend %o_hide;
	@extend %space_b;
	display: inline-block;
	position: relative;
	width: 100%;
    a {
        color: color(link);
        text-decoration: none;
    }
    time {
    	color: color(label);
    }
	&_head{
		@include type_space(line-height, 1);
		@extend %space_b;
	}
	&_body{
		//@include type_font_size(modular-scale(-1));
		@include type_space(min-height, 9);
		@include type_space(max-height, 10);
        @extend %o_hide;
		@extend %mask;
		margin-top: 0 !important;
	}
	&_foot{
		@include type_space(max-height, 2);
		@include type-space(min-height, 2);
		@extend %one_whole;
		@extend %pad_l_half;
		@extend %pad_r;
		border-top: 1px solid $gray_color_lighter;
		position: absolute !important;
		margin-top: -1px;
		bottom: 0;
		left: 0;
		box-shadow: 0 -5px 5px 3px rgba(255,255,255,1);
		vertical-align: middle;
		background-color: #fff;
	}
//	@include mq(bigs){
//		@include type_space(height, 12);
//	}
//	@include mq(lap){
//		@include type_space(height, 12);
//	}
}

.media_flag{
	display: table;
	width: 100%;

	&_img, &_body{
		margin: 0;

	}
	&_img{
		display: table-cell;
		overflow: hidden;
		position: relative;
		background-color: lighten(color(form), 2%);

		img, .img{
			max-width: none;
			@extend %absolute;
			top: 0; left: 0; right: 0; bottom: 0;
			margin: auto;
		}
	}

	&_body{
		width: 100%;
		display: block;
		@include type_space(max-height, 10);
	}

}

@mixin responsive_borders(
	$namespace: "",
	$include-classes: false
) {
	$selector: unquote(", .");
    @if $include-classes == false {
        $selector: unquote("//");
    }
	%#{$namespace}border_t#{$selector}#{$namespace}border_t {
		border-top: $border_width $border_style $border_color;
		margin-top: -($border_width);
		@at-root &_2{
			border-top-width: ($border_width*2);
			border-top-style: $border_style;
			margin-top: -($border_width*2);
		}
		@at-root &_half{
			border-top-width: ($border_width/2);
			border-top-style: $border_style;
			margin-top: -($border_width/2);
		}
	}
	%#{$namespace}border_r#{$selector}#{$namespace}border_r {
		border-right: $border_width $border_style $border_color;
		@at-root &_2{
			border-right-width: ($border_width*2);
		}
		@at-root &_half{
			border-right-width: ($border_width/2);
		}
	}
	%#{$namespace}border_b#{$selector}#{$namespace}border_b {
		border-top: $border_width $border_style $border_color;
		margin-top: -($border_width);
		@at-root &_2{
			border-bottom-width: ($border_width*2);
			margin-top: -($border_width*2);
		}
		@at-root &_half{
			border-bottom-width: ($border_width/2);
			margin-top: -($border_width/2);
		}
	}
	%#{$namespace}border_l#{$selector}#{$namespace}border_l {
		border-left: $border_width $border_style $border_color;
		@at-root &_2{
			border-top-width: ($border_width*2);
		}
		@at-root &_half{
			border-top-width: ($border_width/2);
		}
	}
	%#{$namespace}border_h#{$selector}#{$namespace}border_h {
		@extend %#{$namespace}border_l; @extend %#{$namespace}border_r;
		@at-root &_2{
			@extend %#{$namespace}border_l_2; @extend %#{$namespace}border_r_2;
		}
		@at-root &_half{
			@extend %#{$namespace}border_l_half; @extend %#{$namespace}border_r_half;
		}
	}
	%#{$namespace}border_v#{$selector}#{$namespace}border_v {
		@extend %#{$namespace}border_t; @extend %#{$namespace}border_b;
		@at-root &_2{
			@extend %#{$namespace}border_t_2; @extend %#{$namespace}border_b_2;
		}
		@at-root &_half{
			@extend %#{$namespace}border_t_half; @extend %#{$namespace}border_b_half;
		}
	}
}

@include responsive_borders("", $include_border_classes);

@if $responsive == true{
    @each $name in $breakpoint_has_widths {
        @include media-query($name) {
           @include responsive_borders('#{$name}_', $include_border_classes);
        }
    }
}