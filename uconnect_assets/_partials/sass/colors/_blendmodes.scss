//--------------------------------
// Color Blending modes
//--------------------------------
//Taken from: https://github.com/heygrady/scss-blend_modes/blob/master/stylesheets/_blend_modes.scss

//Mimic blending modes found in photoshop.

//--------------------------------
// Normal
//--------------------------------
@function blend_normal ($foreground, $background) {
  $opacity: opacity($foreground);
  $background_opacity: opacity($background);

  // calculate opacity
  $bm_red: red($foreground) * $opacity + red($background) * $background_opacity * (1 - $opacity);
  $bm_green: green($foreground) * $opacity + green($background) * $background_opacity * (1 - $opacity);
  $bm_blue: blue($foreground) * $opacity + blue($background) * $background_opacity * (1 - $opacity);
  @return rgb($bm_red, $bm_green, $bm_blue);
}

//--------------------------------
// Multiply
//--------------------------------
@function blend_multiply ($foreground, $background) {
  $bm_red: red($background) * red($foreground) / 255;
  $bm_green: green($background) * green($foreground) / 255;
  $bm_blue: blue($background) * blue($foreground) / 255;

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

//--------------------------------
// Lighten
//--------------------------------
@function blend_lighten ($foreground, $background) {
  $bm_red: blend_lighten_color(red($foreground), red($background));
  $bm_green: blend_lighten_color(green($foreground), green($background));
  $bm_blue: blend_lighten_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_lighten_color($foreground, $background) {
  @if $background > $foreground {
    $foreground: $background;
  }
  @return $foreground;
}

//--------------------------------
// Darken
//--------------------------------
@function blend_darken ($foreground, $background) {
  $bm_red: blend_darken_color(red($foreground), red($background));
  $bm_green: blend_darken_color(green($foreground), green($background));
  $bm_blue: blend_darken_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_darken_color($foreground, $background) {
  @if $background < $foreground {
    $foreground: $background;
  }
  @return $foreground;
}

//--------------------------------
// Darker Color
//--------------------------------
@function blend_darkercolor ($foreground, $background) {
  $bm_red: red($foreground);
  $bm_green: green($foreground);
  $bm_blue: blue($foreground);
  $background_red: red($background);
  $background_green: green($background);
  $background_blue: blue($background);

  @if $background_red * 0.3 + $background_green * 0.59 + $background_blue * 0.11 <= $bm_red * 0.3 + $bm_green * 0.59 + $bm_blue * 0.11 {
    $bm_red: $background_red;
    $bm_green: $background_green;
    $bm_blue: $background_blue;
  }
  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

//--------------------------------
// Lighter Color
//--------------------------------
@function blend_lightercolor ($foreground, $background) {
  $bm_red: red($foreground);
  $bm_green: green($foreground);
  $bm_blue: blue($foreground);
  $background_red: red($background);
  $background_green: green($background);
  $background_blue: blue($background);

  @if $background_red * 0.3 + $background_green * 0.59 + $background_blue * 0.11 > $bm_red * 0.3 + $bm_green * 0.59 + $bm_blue * 0.11 {
    $bm_red: $background_red;
    $bm_green: $background_green;
    $bm_blue: $background_blue;
  }
  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

//--------------------------------
// Linear Dodge
//--------------------------------
@function blend_lineardodge ($foreground, $background) {
  $bm_red: blend_lineardodge_color(red($foreground), red($background));
  $bm_green: blend_lineardodge_color(green($foreground), green($background));
  $bm_blue: blend_lineardodge_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_lineardodge_color($foreground, $background) {
  @if $background + $foreground > 255 {
    $foreground: 255;
  }
  @else {
    $foreground: $background + $foreground;
  }
  @return $foreground;
}

//--------------------------------
// Linear Burn
//--------------------------------
@function blend_linearburn ($foreground, $background) {
  $bm_red: blend_linearburn_color(red($foreground), red($background));
  $bm_green: blend_linearburn_color(green($foreground), green($background));
  $bm_blue: blend_linearburn_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_linearburn_color($foreground, $background) {
  @if $background + $foreground < 255 {
    $foreground: 0;
  }
  @else {
    $foreground: $background + $foreground - 255;
  }
  @return $foreground;
}

//--------------------------------
// Difference
//--------------------------------
@function blend_difference ($foreground, $background) {
  $bm_red: abs(red($background) - red($foreground));
  $bm_green: abs(green($background) - green($foreground));
  $bm_blue: abs(blue($background) - blue($foreground));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

//--------------------------------
// Screen
//--------------------------------
@function blend_screen ($foreground, $background) {
  $bm_red: blend_screen_color(red($foreground), red($background));
  $bm_green: blend_screen_color(green($foreground), green($background));
  $bm_blue: blend_screen_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_screen_color($foreground, $background) {
  @return (255 - ( ( (255 - $foreground) * (255 - $background)) / 256));
}

//--------------------------------
// Exclusion
//--------------------------------
@function blend_exclusion ($foreground, $background) {
  $bm_red: blend_exclusion_color(red($foreground), red($background));
  $bm_green: blend_exclusion_color(green($foreground), green($background));
  $bm_blue: blend_exclusion_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_exclusion_color($foreground, $background) {
  @return $background - ($background * (2 / 255) - 1) * $foreground;
}

//--------------------------------
// Overlay
//--------------------------------
@function blend_overlay ($foreground, $background) {
  $bm_red: blend_overlay_color(red($foreground), red($background));
  $bm_green: blend_overlay_color(green($foreground), green($background));
  $bm_blue: blend_overlay_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_overlay_color($foreground, $background) {
  @if $background <= 255 / 2 {
    $foreground: (2 * $background * $foreground) / 255;
  } @else {
    $foreground: 255 - (255 - 2 * ($background - (255 / 2))) * (255 - $foreground) / 255;
  }
  @return $foreground;
}

//--------------------------------
// Soft Light
//--------------------------------
@function blend_softlight ($foreground, $background) {
  $bm_red: blend_softlight_color(red($foreground), red($background));
  $bm_green: blend_softlight_color(green($foreground), green($background));
  $bm_blue: blend_softlight_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_softlight_color($foreground, $background) {
  @if $background < 128 {
    $foreground: (($foreground / 2) + 64) * $background * (2 / 255);
  } @else {
    $foreground: 255 - (191 - ($foreground / 2)) * (255 - $background) * (2 / 255);
  }
  @return $foreground;
}

//--------------------------------
// Hard Light
//--------------------------------
@function blend_hardlight ($foreground, $background) {
  $bm_red: blend_hardlight_color(red($foreground), red($background));
  $bm_green: blend_hardlight_color(green($foreground), green($background));
  $bm_blue: blend_hardlight_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_hardlight_color($foreground, $background) {
  $tmp-blend: $foreground;
  @if $tmp-blend < 128 {
    $foreground: $background * $tmp-blend * (2 / 255);
  } @else {
    $foreground: 255 - (255-$background) * (255-$tmp-blend) * (2 / 255);
  }
  @return $foreground;
}

//--------------------------------
// Color Dodge
//--------------------------------
@function blend_colordodge ($foreground, $background) {
  $bm_red: blend_colordodge_color(red($foreground), red($background));
  $bm_green: blend_colordodge_color(green($foreground), green($background));
  $bm_blue: blend_colordodge_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_colordodge_color($foreground, $background) {
  $tmp: $background * 256 / (255 - $foreground);
  @if $tmp > 255 or $foreground == 255 {
    $foreground: 255;
  } @else {
    $foreground: $tmp;
  }
  @return $foreground;
}

//--------------------------------
// Color Burn
//--------------------------------
@function blend_colorburn ($foreground, $background) {
  $bm_red: blend_colorburn_color(red($foreground), red($background));
  $bm_green: blend_colorburn_color(green($foreground), green($background));
  $bm_blue: blend_colorburn_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_colorburn_color($foreground, $background) {
  $tmp: (255 - ((255 - $background) * 255) / $foreground);

  // TODO: hacked to replicate photoshop
  @if $foreground == 0 {
    $foreground: 255;
  } @elseif $tmp < 0 {
    $foreground: 0;
  } @else {
    $foreground: $tmp;
  }
  @return $foreground;
}

//--------------------------------
// Linear Light
//--------------------------------
@function blend_linearlight ($foreground, $background) {
  $bm_red: blend_linearlight_color(red($foreground), red($background));
  $bm_green: blend_linearlight_color(green($foreground), green($background));
  $bm_blue: blend_linearlight_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_linearlight_color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend_linearburn_color($background, 2 * $foreground);
  } @else {
    $foreground: blend_lineardodge_color($background, 2 * ($foreground - 128));
  }
  @return $foreground;
}

//--------------------------------
// Vivid Light
//--------------------------------
@function blend_vividlight ($foreground, $background) {
  $bm_red: blend_vividlight_color(red($foreground), red($background));
  $bm_green: blend_vividlight_color(green($foreground), green($background));
  $bm_blue: blend_vividlight_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

@function blend_vividlight_color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend_colorburn_color(2 * $foreground, $background);
  } @else {
    $foreground: blend_colordodge_color(2 * ($foreground - 128), $background);
  }
  @return $foreground;
}

//--------------------------------
// Pin Light
//--------------------------------
@function blend_pinlight ($foreground, $background) {
  $bm_red:   blend_pinlight_color(red($foreground), red($background));
  $bm_green: blend_pinlight_color(green($foreground), green($background));
  $bm_blue:  blend_pinlight_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

@function blend_pinlight_color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend_darken_color($background, 2 * $foreground);
  } @else {
    $foreground: blend_lighten_color($background, 2 * ($foreground - 128));
  }
  @return $foreground;
}

//--------------------------------
// Hard Mix
//--------------------------------
@function blend_hardmix ($foreground, $background) {
  $bm_red: blend_hardmix_color(red($foreground), red($background));
  $bm_green: blend_hardmix_color(green($foreground), green($background));
  $bm_blue: blend_hardmix_color(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

@function blend_hardmix_color($foreground, $background) {
  $tmp: blend_vividlight_color($foreground, $background);
  @if $tmp < 128 {
    $foreground: 0;
  } @else {
    $foreground: 255;
  }
  @return $foreground;
}


// Unique to Photoshop

//--------------------------------
// Color Blend
//--------------------------------
@function blend_colorblend ($foreground, $background) {
  $foreground-hsv: color_to_hsv($foreground);
  $background_hsv: color_to_hsv($background);

  $bm_hsv: nth($foreground-hsv, 1), nth($foreground-hsv, 2), nth($background_hsv, 3);
  $bm_color: hsv_to_color($bm_hsv);

  @return blend_normal(rgba(red($bm_color), green($bm_color), blue($bm_color), opacity($foreground)), $background);
}

//--------------------------------
// Dissolve
//--------------------------------
@function blend_dissolve ($foreground, $background) {
  // The Dissolve blend mode acts on transparent and partially transparent pixels
  // it treats transparency as a pixel pattern and applies a diffusion dither pattern.
  // @see http://photoblogstop.com/photoshop/photoshop-blend_modes-explained
  @return $foreground;
}

//--------------------------------
// Divide
//--------------------------------
@function blend_divide ($foreground, $background) {
  $bm_red: blend_divide_colors(red($foreground), red($background));
  $bm_green: blend_divide_colors(green($foreground), green($background));
  $bm_blue:blend_divide_colors(blue($foreground), blue($background));

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}
@function blend_divide_colors($foreground, $background) {
  @return min((($background / 255) / ($foreground / 255)) * 255, 255);
}

//--------------------------------
// Hue
//--------------------------------
@function blend_hue ($foreground, $background) {
  $foreground-hsv: color_to_hsv($foreground);
  $background_hsv: color_to_hsv($background);

  $bm_hsv: nth($foreground-hsv, 1), nth($background_hsv, 2), nth($background_hsv, 3);
  $bm_color: hsv_to_color($bm_hsv);

  @return blend_normal(rgba(red($bm_color), green($bm_color), blue($bm_color), opacity($foreground)), $background);
}

//--------------------------------
// Luminosity
//--------------------------------
@function blend_luminosity ($foreground, $background) {
  $foreground-hsv: color_to_hsv($foreground);
  $background_hsv: color_to_hsv($background);

  $bm_hsv: nth($background_hsv, 1), nth($background_hsv, 2), nth($foreground-hsv, 3);
  $bm_color: hsv_to_color($bm_hsv);

  @return blend_normal(rgba(red($bm_color), green($bm_color), blue($bm_color), opacity($foreground)), $background);
}

//--------------------------------
// Saturation
//--------------------------------
@function blend_saturation ($foreground, $background) {
  $foreground-hsv: color_to_hsv($foreground);
  $background_hsv: color_to_hsv($background);

  $bm_hsv: nth($background_hsv, 1), nth($foreground-hsv, 2), nth($background_hsv, 3);
  $bm_color: hsv_to_color($bm_hsv);

  @return blend_normal(rgba(red($bm_color), green($bm_color), blue($bm_color), opacity($foreground)), $background);
}

//--------------------------------
// Subtract
//--------------------------------
@function blend_subtract ($foreground, $background) {
  $bm_red: max(red($background) - red($foreground), 0);
  $bm_green: max(green($background) - green($foreground), 0);
  $bm_blue: max(blue($background) - blue($foreground), 0);

  @return blend_normal(rgba($bm_red, $bm_green, $bm_blue, opacity($foreground)), $background);
}

//--------------------------------
// Tints and Shades (adding black or white to a color)
//--------------------------------
// Adapted from: https://gist.github.com/benfrain/7545629

// Add percentage of white to a color
@function blend_tint($color, $percent){
  @return mix(white, $color, $percent);
}
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
  @return mix(black, $color, $percent);
}
@function blend_shade($color, $percent){
  @return mix(black, $color, $percent);
}


//--------------------------------
// HSL and HSV
//--------------------------------
// @see https://gist.github.com/1069204
@function hsv_to_hsl($h, $s: 0, $v: 0) {
  @if type_of($h) == 'list' {
    $v: nth($h, 3);
    $s: nth($h, 2);
    $h: nth($h, 1);
  }

  @if unit($h) == 'deg' {
    $h: 3.1415 * 2 * ($h / 360deg);
  }
  @if unit($s) == '%' {
    $s: 0 + ($s / 100%);
  }
  @if unit($v) == '%' {
    $v: 0 + ($v / 100%);
  }

  $ss: $s * $v;
  $ll: (2 - $s) * $v;

  @if $ll <= 1 {
    $ss: $ss / $ll;
  } @else if ($ll == 2) {
    $ss: 0;
  } @else {
    $ss: $ss / (2 - $ll);
  }

  $ll: $ll / 2;

  @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $ss))), percentage(max(0, min(1, $ll)));
}

@function hsl_to_hsv($h, $ss: 0, $ll: 0) {
  @if type_of($h) == 'list' {
    $ll: nth($h, 3);
    $ss: nth($h, 2);
    $h: nth($h, 1);
  } @else if type_of($h) == 'color' {
    $ll: lightness($h);
    $ss: saturation($h);
    $h: hue($h);
  }

  @if unit($h) == 'deg' {
    $h: 3.1415 * 2 * ($h / 360deg);
  }
  @if unit($ss) == '%' {
    $ss: 0 + ($ss / 100%);
  }
  @if unit($ll) == '%' {
    $ll: 0 + ($ll / 100%);
  }

  $ll: $ll * 2;

  @if $ll <= 1 {
    $ss: $ss * $ll;
  } @else {
    $ss: $ss * (2 - $ll);
  }

  $v: ($ll + $ss) / 2;
  $s: (2 * $ss) / ($ll + $ss);

  @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $s))), percentage(max(0, min(1, $v)));
}

@function color_to_hsv($color) {
  @return hsl_to_hsv($color);
}

@function hsv_to_color($h, $s: 0, $v: 0) {
  $hsl: hsv_to_hsl($h, $s, $v);
  @return hsl(nth($hsl, 1), nth($hsl, 2), nth($hsl, 3));
}