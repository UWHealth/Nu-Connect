//------------------------------------
//    $Global Variables
//------------------------------------

 // CONTENTS
 // INTRODUCTION.........What and Why.
 // TYPOGRAPHY...........Default typography variables.
 // GRID.................Default grid variables. See /grid/_grids.scss.
 // COLORS...............Default colors along with ligher/darker versions.


//------------------------------------
//    $INTRODUCTION
//------------------------------------

// All variables defined here are defaults.
// They can, therefore be overridden in config.scss.


//------------------------------------
//    $TYPOGRAPHY
//------------------------------------

//See /utilities/_helpers.scss for where these variables are most useful.

$primary_font_stack:   helvetica, arial, sans-serif !default;
$secondary_font_stack: georgia, serif 				!default;
$monospace_font_stack: Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace !default;


//See /type/_fonts.scss for where these variables are applied.

$use_web_fonts: 		true                !default;
$font_file_location: 	'fonts'    !default;
$font_file_name: 		'bitter','opensans' !default;
$font_italics: 			true, (false, true, true) !default;
$font_weights: 			(400,700),(200,400,700) !default;
$font_include_eot: 		true !default;

// What would you like your base font_size to be? Define in pixels; the library
// will convert measurements to the most appropriate units (rems or unitless).
// $base_font_size:      16px !default;
// $base_line_height:    24px !default;

// Would you like to automatically scale your Heading sizes?
// This can provide a more elegant typographic rhythm and is recommended to stay at true.
// $auto_scale_type:          true !default;

// Set the ratio by which your type should grow.
// Accepts two numbers, representing a ratio, typically associated with
// music intervals. You may also use floats (1.33).
// Common intervals: Perfect fourth (4,3)[default], Perfect Fifth (3,2),
// Perfect Octave (2,1), Major Third (5,4), Major Sixth (5,3).
// The Golden Ratio is (1.618,1).
$scale_ratio:               4,3   !default;

// Heading sizes if you'd rather set them yourself (set $auto_scale_type to false).
$type_h1_size:             modular_scale(7) !default;
$type_h2_size:             modular_scale(5) !default;
$type_h3_size:             modular_scale(4) !default;
$type_h4_size:             modular_scale(3) !default;
$type_h5_size:             modular_scale(2) !default;
$type_h6_size:             modular_scale(1) !default;

//Create heading classes for sizing (e.g. .h1,.h2,etc.)?
$type_scale_classes:       true !default;

// Would you like indented (rather than spaced) paragraph delimiting?
$indented_paragraphs: false !default;

// Would you like to show a baseline grid? This is handy during development.
$show_baseline:       true !default;

// Do not modify these variables; they are internal settings upon which the
// library depends.
$type_magic_number:        $base_line_height;
$type_magic_ratio:         $base_line_height / $base_font_size;

@if $base_font_size > $base_line_height {

    $type_magic_number:        ceil($base_font_size / $base_line_height) * ($base_line_height) !global;
    $type_magic_ratio:         ceil($base_font_size / $base_line_height) * ($base_line_height) / $base_font_size !global;

    @if $type_magic_ratio < 1.2 {
        $type_magic_number:        ceil($base_font_size / ($base_line_height * 2)) * ($base_line_height * 2) !global;
        $type_magic_ratio:         ceil($base_font_size / ($base_line_height * 2)) * ($base_line_height * 2) / $base_font_size !global;

    }

}
$type_headings:            6,5,4,3,2,1;
$type_modular_scale:       0;


//Spacing variable for simple inclusion.
$type_space: 2 * $type_magic_ratio;

//Variable for easier reference:
$stripped_base_font-size:  strip_units($base_font_size) !global;

//Checking for floats in $scale_ratio
@if length($scale_ratio) == 2{
// Making sure we don't have a ratio below 1.
    @if nth($scale_ratio,1) < nth($scale_ratio,2){
        $type_modular_scale:   nth($scale_ratio, 2)/nth($scale_ratio, 1);
    }@else{
        $type_modular_scale:   nth($scale_ratio, 1)/nth($scale_ratio, 2);
    }
}
@else {
    $type_modular_scale:   $scale_ratio !global;
}

//------------------------------------
//    $GRID
//------------------------------------

// If you are building a non-responsive site but would still like to use
// csswizardry-grids, set this to ‘false’:
$responsive:            true!default;



 // Is this build mobile first? Setting to ‘true’ means that all grids will be
 // 100% width if you do not apply a more specific class to them.

$mobile_first:          true!default;



 // Set the spacing between your grid items.

$gutter:                24px!default;



 // Would you like Sass’ silent classes, or regular CSS classes?

$use_silent_classes:    false!default;


 // Would you like to use floats instead of inline block?
$use_floats:             false!default;


 // Would you like push and pull classes enabled?

$push:                  false!default;
$pull:                  false!default;



 // Using `inline-block` means that the grid items need their whitespace removing
 // in order for them to work correctly. Set the following to true if you are
 // going to achieve this by manually removing/commenting out any whitespace in
 // your HTML yourself.

 // Setting this to false invokes a hack which cannot always be guaranteed,
 // please see the following for more detail:

 // github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 // github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371

$use_markup_fix:        true!default;


 // Define your breakpoints. The first value is the prefix that shall be used for
 // your classes (e.g. `.small_one-half`), the second value is the media query
 // that the breakpoint fires at.

$breakpoints: (
    'small' '(max-width: 480px)',
    'lap' '(min-width: 481px) and (max-width: 1023px)',
    'port' '(max-width: 1023px)',
    'desk' '(min-width: 1024px)'
)!default;



// Define which namespaced breakpoints you would like to generate for each of
// widths, push and pull. This is handy if you only need pull on, say, desk, or
// you only need a new width breakpoint at mobile sizes. It allows you to only
// compile as much CSS as you need. All are turned on by default, but you can
// add and remove breakpoints at will.

// Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
// have been set to ‘true’.

$breakpoint_has_widths: ('small', 'lap', 'port', 'desk')!default;
$breakpoint_has_push:   ('small', 'lap', 'port', 'desk')!default;
$breakpoint_has_pull:   ('small', 'lap', 'port', 'desk')!default;



//Abstracting the largest and smallest breakpoints.

$sm_breakpoint:	nth($breakpoints, 1);
$lg_breakpoint: nth($breakpoints, length($breakpoints));

$smalls: nth($sm_breakpoint, 1);
$bigs: nth($lg_breakpoint, 1);


//------------------------------------
//		$SPACING AND ALIGNMENT
//------------------------------------

//Silent versions of these classes will always be output.
//These options control the output of the normal css classes.

$include_alignment_classes: 	false !default;
$include_spacing_classes: 		false !default;


//------------------------------------
//    $COLORS
//------------------------------------
